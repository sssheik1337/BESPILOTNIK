from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InputMediaVideo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import get_user_menu, get_my_appeals_user_menu, get_admin_menu, get_notification_menu, get_channel_take_button
from utils.validators import validate_serial, validate_media
from database.models import Database
from datetime import datetime
import json
from config import MAIN_ADMIN_IDS
import logging
from aiogram.exceptions import TelegramBadRequest

logger = logging.getLogger(__name__)

router = Router()

class AppealForm(StatesGroup):
    serial = State()
    description = State()
    media = State()

@router.callback_query(F.data == "create_appeal")
async def create_appeal(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:", reply_markup=keyboard)
    await state.set_state(AppealForm.serial)
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")

@router.message(AppealForm.serial)
async def process_serial(message: Message, state: FSMContext):
    serial = message.text
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    if not validate_serial(serial):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (A-Za-z0-9, 8‚Äì20 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=keyboard)
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä {serial} –æ—Ç @{message.from_user.username} (ID: {message.from_user.id})")
        return
    db = Database()
    await db.connect()
    async with db.conn.cursor() as cursor:
        await cursor.execute("SELECT * FROM serials WHERE serial = ?", (serial,))
        serial_exists = await cursor.fetchone()
    if not serial_exists:
        await message.answer("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", reply_markup=keyboard)
        logger.warning(f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä {serial} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç @{message.from_user.username} (ID: {message.from_user.id})")
        await state.clear()
        return
    await state.update_data(serial=serial, user_id=message.from_user.id)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=keyboard)
    await state.set_state(AppealForm.description)
    logger.debug(f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä {serial} –ø—Ä–∏–Ω—è—Ç –æ—Ç @{message.from_user.username} (ID: {message.from_user.id})")

@router.message(AppealForm.description)
async def process_description(message: Message, state: FSMContext):
    description = message.text.strip() if message.text else ""
    if not description:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=keyboard)
        logger.warning(f"–ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç @{message.from_user.username} (ID: {message.from_user.id})")
        return
    await state.update_data(description=description)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await message.answer("–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∫—Ä—É–∂–æ—á–∫–∏ (–¥–æ 200 –ú–ë, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):", reply_markup=keyboard)
    await state.set_state(AppealForm.media)
    logger.debug(f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –æ—Ç @{message.from_user.username} (ID: {message.from_user.id}): {description}")

@router.message(AppealForm.media)
async def process_media(message: Message, state: FSMContext):
    data = await state.get_data()
    media_files = data.get("media_files", [])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    is_valid, media_type = validate_media(message)
    if message.text and message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        db = Database()
        await db.connect()
        duplicate = await db.check_duplicate_appeal(data["serial"], data["description"], data["user_id"])
        if duplicate:
            await message.answer("–û—à–∏–±–∫–∞: –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º.",
                                 reply_markup=keyboard)
            logger.warning(f"–î—É–±–ª–∏—Ä—É—é—â–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è —Å–µ—Ä–∏–π–Ω–∏–∫–∞ {data['serial']} –æ—Ç @{message.from_user.username} (ID: {data['user_id']})")
            await state.clear()
            return
        appeal_id, appeal_count = await db.add_appeal(data["serial"], message.from_user.username, data["description"],
                                                      media_files, data["user_id"])
        await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=keyboard)
        logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{appeal_id} —Å–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{message.from_user.username} (ID: {data['user_id']})")
        channels = await db.get_notification_channels()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(channels)}")
        created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        appeal_type = "–ü–µ—Ä–≤–∞—è" if appeal_count == 1 else "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è"
        text = (f"üì≤ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{appeal_id}:\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n"
                f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {data['serial']}\n"
                f"–¢–∏–ø –∑–∞—è–≤–∫–∏: {appeal_type}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}")
        for channel in channels:
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª {channel['channel_name']} (ID: {channel['channel_id']})")
            media_group = []
            for media in media_files:
                if media["type"] == "photo":
                    media_group.append(InputMediaPhoto(media=media["file_id"]))
                elif media["type"] in ["video", "video_note"]:
                    media_group.append(InputMediaVideo(media=media["file_id"]))
            try:
                if media_group:
                    await message.bot.send_media_group(
                        chat_id=channel["channel_id"],
                        message_thread_id=channel["topic_id"],
                        media=media_group
                    )
                logger.debug(f"–í—ã–∑–æ–≤ get_channel_take_button –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{appeal_id}")
                await message.bot.send_message(
                    chat_id=channel["channel_id"],
                    message_thread_id=channel["topic_id"],
                    text=text,
                    reply_markup=get_channel_take_button(appeal_id)
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ ‚Ññ{appeal_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel['channel_name']} (ID: {channel['channel_id']})")
            except TelegramBadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª {channel['channel_name']} (ID: {channel['channel_id']}) –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{appeal_id}: {str(e)}")
        recipients = set()
        async with db.conn.cursor() as cursor:
            await cursor.execute("SELECT admin_id FROM admins")
            admins = await cursor.fetchall()
            for admin in admins:
                recipients.add(admin["admin_id"])
        recipients.update(MAIN_ADMIN_IDS)
        if not recipients:
            logger.warning("–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        else:
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(recipients)}: {list(recipients)}")
            for admin_id in recipients:
                media_group = []
                for media in media_files:
                    if media["type"] == "photo" and media.get("file_id"):
                        media_group.append(InputMediaPhoto(media=media["file_id"]))
                    elif media["type"] in ["video", "video_note"] and media.get("file_id"):
                        media_group.append(InputMediaVideo(media=media["file_id"]))
                try:
                    if media_group:
                        await message.bot.send_media_group(
                            chat_id=admin_id,
                            media=media_group
                        )
                    await message.bot.send_message(
                        chat_id=admin_id,
                        text=text,
                        reply_markup=get_notification_menu(appeal_id)
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ ‚Ññ{appeal_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ID {admin_id}")
                except TelegramBadRequest as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ID {admin_id} –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{appeal_id}: {str(e)}")
                    continue
        await state.clear()
    elif is_valid:
        file_size = (message.photo[-1].file_size if message.photo else
                     message.video.file_size if message.video else
                     message.video_note.file_size) / (1024 * 1024)  # –≤ –ú–ë
        if file_size > 200:
            await message.answer("–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 200 –ú–ë. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.", reply_markup=keyboard)
            logger.warning(f"–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 200 –ú–ë –æ—Ç @{message.from_user.username} (ID: {message.from_user.id})")
            return
        file_id = (message.photo[-1].file_id if message.photo else
                   message.video.file_id if message.video else
                   message.video_note.file_id)
        media_files.append({
            "type": media_type,
            "file_id": file_id
        })
        await state.update_data(media_files=media_files)
        await message.answer("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –µ—â—ë –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ':", reply_markup=keyboard)
        logger.debug(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{message.from_user.username} (ID: {message.from_user.id})")
    else:
        await message.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ–¥–∏–∞. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫.", reply_markup=keyboard)
        logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ–¥–∏–∞ –æ—Ç @{message.from_user.username} (ID: {message.from_user.id})")


@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    db = Database()
    await db.connect()
    is_admin = False
    async with db.conn.cursor() as cursor:
        await cursor.execute("SELECT admin_id FROM admins WHERE admin_id = ?", (user_id,))
        admin = await cursor.fetchone()
        if admin or user_id in MAIN_ADMIN_IDS:
            is_admin = True

    if state:
        await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback.message.content_type == 'text':
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if is_admin:
            await callback.message.edit_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                reply_markup=get_admin_menu(user_id)
            )
        else:
            await callback.message.edit_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                reply_markup=get_user_menu()
            )
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.delete()
        if is_admin:
            await callback.message.bot.send_message(
                chat_id=callback.from_user.id,
                text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                reply_markup=get_admin_menu(user_id)
            )
        else:
            await callback.message.bot.send_message(
                chat_id=callback.from_user.id,
                text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                reply_markup=get_user_menu()
            )

@router.callback_query(F.data == "my_appeals_user")
async def show_my_appeals_user(callback: CallbackQuery):
    db = Database()
    await db.connect()
    appeals = await db.get_user_appeals(callback.from_user.id)
    if not appeals:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=keyboard)
        logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{callback.from_user.username} (ID: {callback.from_user.id}) –Ω–µ—Ç –∑–∞—è–≤–æ–∫")
        return
    await callback.message.edit_text("–í–∞—à–∏ –∑–∞—è–≤–∫–∏:", reply_markup=get_my_appeals_user_menu(appeals))
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("view_appeal_user_"))
async def view_appeal_user(callback: CallbackQuery):
    appeal_id = int(callback.data.split("_")[-1])
    db = Database()
    await db.connect()
    appeal = await db.get_appeal(appeal_id)
    if not appeal:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=keyboard)
        logger.warning(f"–ó–∞—è–≤–∫–∞ ‚Ññ{appeal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{callback.from_user.username} (ID: {callback.from_user.id})")
        return
    created_time = datetime.strptime(appeal['created_time'], "%Y-%m-%dT%H:%M:%S.%f").strftime("%Y-%m-%d %H:%M:%S")
    text = (f"–ó–∞—è–≤–∫–∞ ‚Ññ{appeal['appeal_id']}:\n"
            f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {appeal['serial']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {appeal['description']}\n"
            f"–°—Ç–∞—Ç—É—Å: {appeal['status']}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_time}")
    if appeal['response'] is not None:
        text += f"\n–û—Ç–≤–µ—Ç: {appeal['response']}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_appeals_user")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∑–∞—è–≤–∫—É ‚Ññ{appeal_id}")