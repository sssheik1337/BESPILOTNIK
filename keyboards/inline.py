from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import MAIN_ADMIN_IDS
from utils.statuses import APPEAL_STATUSES
import logging

logger = logging.getLogger(__name__)

def get_user_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìû –°–≤—è–∑—å —Å –æ—Ä–Ω–∏—Ç–æ–ª–æ–≥–æ–º", callback_data="create_appeal")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_appeals_user")],
        [InlineKeyboardButton(text="üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É", callback_data="prepare_launch")],
        [InlineKeyboardButton(text="üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª—å—Ç–∞", callback_data="setup_remote")],
        [InlineKeyboardButton(text="üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ù–°–£", callback_data="setup_nsu")]
    ])
    logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é")
    return keyboard

def get_manuals_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª—å—Ç–∞", callback_data="manual_remote")],
        [InlineKeyboardButton(text="–ü—Ä–æ—à–∏–≤–∫–∞ –ï–†–õ–°", callback_data="manual_erlc")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ù–°–£", callback_data="manual_nsu")],
        [InlineKeyboardButton(text="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –¥—Ä–æ–Ω—É", callback_data="manual_drone")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤")
    return keyboard

def get_exam_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å —ç–∫–∑–∞–º–µ–Ω", callback_data="take_exam")],
        [InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∫–∞ —ç–∫–∑–∞–º–µ–Ω–æ–≤", callback_data="export_exams")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é —ç–∫–∑–∞–º–µ–Ω–æ–≤")
    return keyboard

def get_admin_menu(user_id):
    keyboard = []
    keyboard.append([InlineKeyboardButton(text="üìã –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏", callback_data="open_appeals")])
    keyboard.append([InlineKeyboardButton(text="üóÇÔ∏è –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏", callback_data="closed_appeals")])
    keyboard.append([InlineKeyboardButton(text="üìå –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_appeals")])
    keyboard.append([InlineKeyboardButton(text="üìù –≠–∫–∑–∞–º–µ–Ω—ã", callback_data="exam_menu")])
    keyboard.append([InlineKeyboardButton(text="üîç –ò—Å—Ç–æ—Ä–∏—è –ø–æ —Å–µ—Ä–∏–π–Ω–∏–∫—É", callback_data="serial_history")])
    keyboard.append([InlineKeyboardButton(text="üõ† –ë—Ä–∞–∫/–í–æ–∑–≤—Ä–∞—Ç/–ó–∞–º–µ–Ω–∞", callback_data="defect_menu")])
    if user_id in MAIN_ADMIN_IDS:
        keyboard.extend([
            [InlineKeyboardButton(text="üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")]
        ])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_my_appeals_user_menu(appeals):
    keyboard = []
    for appeal in appeals:
        keyboard.append([
            InlineKeyboardButton(
                text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{appeal['appeal_id']} ({APPEAL_STATUSES.get(appeal['status'], appeal['status'])})",
                callback_data=f"view_appeal_user_{appeal['appeal_id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è '–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å {len(appeals)} –∑–∞—è–≤–∫–∞–º–∏")
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_open_appeals_menu(appeals, page, total_appeals):
    keyboard = []
    for appeal in appeals:
        keyboard.append([
            InlineKeyboardButton(
                text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{appeal['appeal_id']} (–ù–æ–≤–∞—è)",
                callback_data=f"view_appeal_{appeal['appeal_id']}"
            )
        ])
    nav_buttons = []
    if total_appeals > 10:
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"open_appeals_page_{page-1}"))
        if (page + 1) * 10 < total_appeals:
            nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"open_appeals_page_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ —Å {len(appeals)} –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_appeal_actions_menu(appeal_id, status):
    keyboard = []
    if status == 'new':
        keyboard.append([InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_appeal_{appeal_id}")])
    else:
        keyboard.extend([
            [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_appeal_{appeal_id}")],
            [InlineKeyboardButton(text="–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"delegate_appeal_{appeal_id}")],
            [InlineKeyboardButton(text="–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–µ–∑–¥", callback_data=f"await_specialist_{appeal_id}")]
        ])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_my_appeals_menu(appeals, page, total_appeals):
    keyboard = []
    for appeal in appeals:
        keyboard.append([
            InlineKeyboardButton(
                text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{appeal['appeal_id']} ({APPEAL_STATUSES.get(appeal['status'], appeal['status'])})",
                callback_data=f"view_appeal_{appeal['appeal_id']}"
            )
        ])
    nav_buttons = []
    if total_appeals > 10:
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"employee_appeals_page_{page-1}"))
        if (page + 1) * 10 < total_appeals:
            nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"employee_appeals_page_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è '–ú–æ–∏ –∑–∞—è–≤–∫–∏' —Å {len(appeals)} –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_response_menu(appeal_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_appeal_{appeal_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_appeal_{appeal_id}")]
    ])

def get_notification_menu(appeal_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_appeal_{appeal_id}")]
    ])

def get_channel_take_button(appeal_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_appeal_{appeal_id}")]
    ])

def get_base_management_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤", callback_data="import_serials")],
        [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤", callback_data="export_serials")],
        [InlineKeyboardButton(text="üìù –í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–æ–≤", callback_data="export_defect_reports")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def get_admin_panel_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="check_employee_appeals")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="stats")],
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π", callback_data="manage_base")],
        [InlineKeyboardButton(text="üìö –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞", callback_data="manage_manuals")],
        [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="add_employee")],
        [InlineKeyboardButton(text="üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É", callback_data="add_channel")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É", callback_data="remove_channel")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É", callback_data="edit_channel")],
        [InlineKeyboardButton(text="üîë –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="change_code_word")],
        [InlineKeyboardButton(text="üè´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –£–¢–¶", callback_data="manage_training_centers")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def get_remove_channel_menu(channels):
    keyboard = []
    for channel in channels:
        topic_part = f"/{channel['topic_id']}" if channel['topic_id'] else ""
        keyboard.append([
            InlineKeyboardButton(
                text=f"{channel['channel_name']}{topic_part}",
                callback_data=f"remove_channel_{channel['channel_id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Å {len(channels)} –∫–∞–Ω–∞–ª–∞–º–∏")
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_edit_channel_menu(channels):
    keyboard = []
    for channel in channels:
        topic_part = f"/{channel['topic_id']}" if channel['topic_id'] else ""
        keyboard.append([
            InlineKeyboardButton(
                text=f"{channel['channel_name']}{topic_part}",
                callback_data=f"edit_channel_{channel['channel_id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Å {len(channels)} –∫–∞–Ω–∞–ª–∞–º–∏")
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_training_centers_menu(centers):
    keyboard = []
    for center in centers:
        if center["center_name"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ center_name –Ω–µ None
            keyboard.append([InlineKeyboardButton(text=center["center_name"], callback_data=f"edit_center_{center['id']}")])
    keyboard.append([InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –£–¢–¶", callback_data="add_training_center")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –£–¢–¶ —Å {len(centers)} —Ü–µ–Ω—Ç—Ä–∞–º–∏")
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_overdue_menu(appeal_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è", callback_data=f"set_new_time_{appeal_id}")],
        [InlineKeyboardButton(text="üë∑ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–µ–∑–¥", callback_data=f"await_specialist_{appeal_id}")]
    ])

def get_defect_status_menu(serial):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë—Ä–∞–∫", callback_data=f"defect_status_brak_{serial}")],
        [InlineKeyboardButton(text="–í–æ–∑–≤—Ä–∞—Ç", callback_data=f"defect_status_vozvrat_{serial}")],
        [InlineKeyboardButton(text="–ó–∞–º–µ–Ω–∞", callback_data=f"defect_status_zamena_{serial}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def get_manuals_admin_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª—å—Ç–∞", callback_data="upload_manual_remote")],
        [InlineKeyboardButton(text="–ü—Ä–æ—à–∏–≤–∫–∞ –ï–†–õ–°", callback_data="upload_manual_erlc")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ù–°–£", callback_data="upload_manual_nsu")],
        [InlineKeyboardButton(text="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –¥—Ä–æ–Ω—É", callback_data="upload_manual_drone")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

def get_employee_list_menu(admins):
    keyboard = []
    for admin in admins:
        keyboard.append([
            InlineKeyboardButton(
                text=f"@{admin['username']}",
                callback_data=f"view_employee_appeals_{admin['admin_id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å {len(admins)} –∞–¥–º–∏–Ω–∞–º–∏")
    return InlineKeyboardMarkup(inline_keyboard=keyboard)